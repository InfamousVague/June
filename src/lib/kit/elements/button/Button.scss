$appearances: (
    primary: --color-primary,
    secondary: --color-secondary,
    info: --color-info,
    "transparent": transparent,
    success: --color-success,
    warning: --color-warning,
    error: --color-error
);

$highlights: (
    primary: --color-primary,
    secondary: --color-secondary,
    info: --color-info,
    success: --color-success,
    warning: --color-warning,
    error: --color-error
);

.button {
    display: inline-flex;
    flex-direction: row;
    gap: var(--gap-less);
    border: none;
    border-radius: var(--border-radius);
    cursor: pointer;
    height: fit-content;
    padding: var(--padding) calc(var(--padding) * 2);
    transition: background-color var(--animation-duration-fast) ease, color var(--animation-duration-fast) ease, border-color var(--animation-duration-fast) ease;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;  
    background-color: transparent;
    color: var(--text-color-light);

    @each $highlight, $var in $highlights {
        border: var(--outline-size) solid var(--text-color-light);

        &.highlight_#{$highlight} {
            border: var(--outline-size) solid var(#{$var});
        }

        &.highlight_none {
            border: var(--outline-size) solid transparent;
        }
    }

    @each $appearance, $var in $appearances {
        &.appearance_#{$appearance} {
            @if $appearance == "transparent" {
                background-color: transparent;
            } @else {
                background-color: var(#{$var});
            }

            color: if(
                $appearance == secondary or $appearance == primary,
                var(--text-color-light),
                var(--text-color-dark)
            );

            &:hover:not(:disabled) {
                background-color: color-mix(in srgb, var(#{$var}) 100%, var(--hover-modifier) 20%);
            }
        }
        &.apperance_transparent {
            &:hover:not(:disabled) {
                background-color: var(--color-secondary);
            }
        }
    }

    &.style_outline {
        background-color: transparent;

        &:hover:not(:disabled) {
            background-color: var(--color-secondary);
        }
    
        @each $highlight, $var in $highlights {
            &.highlight_#{$highlight} {
                // Set the correct text color by default
                color: if(
                    $highlight == primary or $highlight == secondary,
                    var(--text-color-light),
                    var(#{$var})
                );
    
                &:hover:not(:disabled) {
                    background-color: color-mix(in srgb, var(#{$var}) 100%, var(--hover-modifier) 20%);
                    border-color: color-mix(in srgb, var(#{$var}) 100%, var(--hover-modifier) 20%);
                    color: if(
                        $highlight == primary or $highlight == secondary,
                        var(--text-color-light),
                        var(--text-color-dark)
                    );
                }
            }
        }
    }

    &.size_extra_small {
        padding: calc(var(--padding) - 0.3rem) calc((var(--padding) * 2) - 0.3rem);
        border-radius: var(--border-radius-small);
    }

    &.size_small {
        padding: calc(var(--padding) - 0.2rem) calc((var(--padding) * 2) - 0.2rem);
        border-radius: var(--border-radius-small);
    }

    &.size_large {
        padding: calc(var(--padding) + 0.2rem) calc((var(--padding) * 2) + 0.2rem);
    }

    &.size_extra_large {
        padding: calc(var(--padding) + 0.4rem) calc((var(--padding) * 2) + 0.4rem);
    }

    &.shape_pill {
        border-radius: var(--border-radius-pill);
    }

    &:disabled {
        opacity: var(--disabled-opacity-modifier);
		cursor: not-allowed;
    }
}